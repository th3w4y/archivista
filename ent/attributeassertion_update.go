// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/attributeassertion"
	"github.com/in-toto/archivista/ent/attributereport"
	"github.com/in-toto/archivista/ent/predicate"
)

// AttributeAssertionUpdate is the builder for updating AttributeAssertion entities.
type AttributeAssertionUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeAssertionMutation
}

// Where appends a list predicates to the AttributeAssertionUpdate builder.
func (aau *AttributeAssertionUpdate) Where(ps ...predicate.AttributeAssertion) *AttributeAssertionUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetAttribute sets the "attribute" field.
func (aau *AttributeAssertionUpdate) SetAttribute(s string) *AttributeAssertionUpdate {
	aau.mutation.SetAttribute(s)
	return aau
}

// SetNillableAttribute sets the "attribute" field if the given value is not nil.
func (aau *AttributeAssertionUpdate) SetNillableAttribute(s *string) *AttributeAssertionUpdate {
	if s != nil {
		aau.SetAttribute(*s)
	}
	return aau
}

// SetTarget sets the "target" field.
func (aau *AttributeAssertionUpdate) SetTarget(m map[string]interface{}) *AttributeAssertionUpdate {
	aau.mutation.SetTarget(m)
	return aau
}

// ClearTarget clears the value of the "target" field.
func (aau *AttributeAssertionUpdate) ClearTarget() *AttributeAssertionUpdate {
	aau.mutation.ClearTarget()
	return aau
}

// SetConditions sets the "conditions" field.
func (aau *AttributeAssertionUpdate) SetConditions(m map[string]interface{}) *AttributeAssertionUpdate {
	aau.mutation.SetConditions(m)
	return aau
}

// ClearConditions clears the value of the "conditions" field.
func (aau *AttributeAssertionUpdate) ClearConditions() *AttributeAssertionUpdate {
	aau.mutation.ClearConditions()
	return aau
}

// SetEvidence sets the "evidence" field.
func (aau *AttributeAssertionUpdate) SetEvidence(m map[string]interface{}) *AttributeAssertionUpdate {
	aau.mutation.SetEvidence(m)
	return aau
}

// ClearEvidence clears the value of the "evidence" field.
func (aau *AttributeAssertionUpdate) ClearEvidence() *AttributeAssertionUpdate {
	aau.mutation.ClearEvidence()
	return aau
}

// SetAttributesReportID sets the "attributes_report" edge to the AttributeReport entity by ID.
func (aau *AttributeAssertionUpdate) SetAttributesReportID(id int) *AttributeAssertionUpdate {
	aau.mutation.SetAttributesReportID(id)
	return aau
}

// SetAttributesReport sets the "attributes_report" edge to the AttributeReport entity.
func (aau *AttributeAssertionUpdate) SetAttributesReport(a *AttributeReport) *AttributeAssertionUpdate {
	return aau.SetAttributesReportID(a.ID)
}

// Mutation returns the AttributeAssertionMutation object of the builder.
func (aau *AttributeAssertionUpdate) Mutation() *AttributeAssertionMutation {
	return aau.mutation
}

// ClearAttributesReport clears the "attributes_report" edge to the AttributeReport entity.
func (aau *AttributeAssertionUpdate) ClearAttributesReport() *AttributeAssertionUpdate {
	aau.mutation.ClearAttributesReport()
	return aau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AttributeAssertionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AttributeAssertionUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AttributeAssertionUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AttributeAssertionUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *AttributeAssertionUpdate) check() error {
	if _, ok := aau.mutation.AttributesReportID(); aau.mutation.AttributesReportCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeAssertion.attributes_report"`)
	}
	return nil
}

func (aau *AttributeAssertionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributeassertion.Table, attributeassertion.Columns, sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Attribute(); ok {
		_spec.SetField(attributeassertion.FieldAttribute, field.TypeString, value)
	}
	if value, ok := aau.mutation.Target(); ok {
		_spec.SetField(attributeassertion.FieldTarget, field.TypeJSON, value)
	}
	if aau.mutation.TargetCleared() {
		_spec.ClearField(attributeassertion.FieldTarget, field.TypeJSON)
	}
	if value, ok := aau.mutation.Conditions(); ok {
		_spec.SetField(attributeassertion.FieldConditions, field.TypeJSON, value)
	}
	if aau.mutation.ConditionsCleared() {
		_spec.ClearField(attributeassertion.FieldConditions, field.TypeJSON)
	}
	if value, ok := aau.mutation.Evidence(); ok {
		_spec.SetField(attributeassertion.FieldEvidence, field.TypeJSON, value)
	}
	if aau.mutation.EvidenceCleared() {
		_spec.ClearField(attributeassertion.FieldEvidence, field.TypeJSON)
	}
	if aau.mutation.AttributesReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributeassertion.AttributesReportTable,
			Columns: []string{attributeassertion.AttributesReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.AttributesReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributeassertion.AttributesReportTable,
			Columns: []string{attributeassertion.AttributesReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributeassertion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AttributeAssertionUpdateOne is the builder for updating a single AttributeAssertion entity.
type AttributeAssertionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeAssertionMutation
}

// SetAttribute sets the "attribute" field.
func (aauo *AttributeAssertionUpdateOne) SetAttribute(s string) *AttributeAssertionUpdateOne {
	aauo.mutation.SetAttribute(s)
	return aauo
}

// SetNillableAttribute sets the "attribute" field if the given value is not nil.
func (aauo *AttributeAssertionUpdateOne) SetNillableAttribute(s *string) *AttributeAssertionUpdateOne {
	if s != nil {
		aauo.SetAttribute(*s)
	}
	return aauo
}

// SetTarget sets the "target" field.
func (aauo *AttributeAssertionUpdateOne) SetTarget(m map[string]interface{}) *AttributeAssertionUpdateOne {
	aauo.mutation.SetTarget(m)
	return aauo
}

// ClearTarget clears the value of the "target" field.
func (aauo *AttributeAssertionUpdateOne) ClearTarget() *AttributeAssertionUpdateOne {
	aauo.mutation.ClearTarget()
	return aauo
}

// SetConditions sets the "conditions" field.
func (aauo *AttributeAssertionUpdateOne) SetConditions(m map[string]interface{}) *AttributeAssertionUpdateOne {
	aauo.mutation.SetConditions(m)
	return aauo
}

// ClearConditions clears the value of the "conditions" field.
func (aauo *AttributeAssertionUpdateOne) ClearConditions() *AttributeAssertionUpdateOne {
	aauo.mutation.ClearConditions()
	return aauo
}

// SetEvidence sets the "evidence" field.
func (aauo *AttributeAssertionUpdateOne) SetEvidence(m map[string]interface{}) *AttributeAssertionUpdateOne {
	aauo.mutation.SetEvidence(m)
	return aauo
}

// ClearEvidence clears the value of the "evidence" field.
func (aauo *AttributeAssertionUpdateOne) ClearEvidence() *AttributeAssertionUpdateOne {
	aauo.mutation.ClearEvidence()
	return aauo
}

// SetAttributesReportID sets the "attributes_report" edge to the AttributeReport entity by ID.
func (aauo *AttributeAssertionUpdateOne) SetAttributesReportID(id int) *AttributeAssertionUpdateOne {
	aauo.mutation.SetAttributesReportID(id)
	return aauo
}

// SetAttributesReport sets the "attributes_report" edge to the AttributeReport entity.
func (aauo *AttributeAssertionUpdateOne) SetAttributesReport(a *AttributeReport) *AttributeAssertionUpdateOne {
	return aauo.SetAttributesReportID(a.ID)
}

// Mutation returns the AttributeAssertionMutation object of the builder.
func (aauo *AttributeAssertionUpdateOne) Mutation() *AttributeAssertionMutation {
	return aauo.mutation
}

// ClearAttributesReport clears the "attributes_report" edge to the AttributeReport entity.
func (aauo *AttributeAssertionUpdateOne) ClearAttributesReport() *AttributeAssertionUpdateOne {
	aauo.mutation.ClearAttributesReport()
	return aauo
}

// Where appends a list predicates to the AttributeAssertionUpdate builder.
func (aauo *AttributeAssertionUpdateOne) Where(ps ...predicate.AttributeAssertion) *AttributeAssertionUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AttributeAssertionUpdateOne) Select(field string, fields ...string) *AttributeAssertionUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AttributeAssertion entity.
func (aauo *AttributeAssertionUpdateOne) Save(ctx context.Context) (*AttributeAssertion, error) {
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AttributeAssertionUpdateOne) SaveX(ctx context.Context) *AttributeAssertion {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AttributeAssertionUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AttributeAssertionUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *AttributeAssertionUpdateOne) check() error {
	if _, ok := aauo.mutation.AttributesReportID(); aauo.mutation.AttributesReportCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeAssertion.attributes_report"`)
	}
	return nil
}

func (aauo *AttributeAssertionUpdateOne) sqlSave(ctx context.Context) (_node *AttributeAssertion, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributeassertion.Table, attributeassertion.Columns, sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeAssertion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributeassertion.FieldID)
		for _, f := range fields {
			if !attributeassertion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributeassertion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Attribute(); ok {
		_spec.SetField(attributeassertion.FieldAttribute, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Target(); ok {
		_spec.SetField(attributeassertion.FieldTarget, field.TypeJSON, value)
	}
	if aauo.mutation.TargetCleared() {
		_spec.ClearField(attributeassertion.FieldTarget, field.TypeJSON)
	}
	if value, ok := aauo.mutation.Conditions(); ok {
		_spec.SetField(attributeassertion.FieldConditions, field.TypeJSON, value)
	}
	if aauo.mutation.ConditionsCleared() {
		_spec.ClearField(attributeassertion.FieldConditions, field.TypeJSON)
	}
	if value, ok := aauo.mutation.Evidence(); ok {
		_spec.SetField(attributeassertion.FieldEvidence, field.TypeJSON, value)
	}
	if aauo.mutation.EvidenceCleared() {
		_spec.ClearField(attributeassertion.FieldEvidence, field.TypeJSON)
	}
	if aauo.mutation.AttributesReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributeassertion.AttributesReportTable,
			Columns: []string{attributeassertion.AttributesReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.AttributesReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributeassertion.AttributesReportTable,
			Columns: []string{attributeassertion.AttributesReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeAssertion{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributeassertion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
