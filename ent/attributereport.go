// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/attributereport"
	"github.com/in-toto/archivista/ent/statement"
)

// AttributeReport is the model entity for the AttributeReport schema.
type AttributeReport struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeReportQuery when eager-loading is set.
	Edges                       AttributeReportEdges `json:"edges"`
	statement_attributes_report *int
	selectValues                sql.SelectValues
}

// AttributeReportEdges holds the relations/edges for other nodes in the graph.
type AttributeReportEdges struct {
	// Attributes holds the value of the attributes edge.
	Attributes []*AttributeAssertion `json:"attributes,omitempty"`
	// Statement holds the value of the statement edge.
	Statement *Statement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAttributes map[string][]*AttributeAssertion
}

// AttributesOrErr returns the Attributes value or an error if the edge
// was not loaded in eager-loading.
func (e AttributeReportEdges) AttributesOrErr() ([]*AttributeAssertion, error) {
	if e.loadedTypes[0] {
		return e.Attributes, nil
	}
	return nil, &NotLoadedError{edge: "attributes"}
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeReportEdges) StatementOrErr() (*Statement, error) {
	if e.loadedTypes[1] {
		if e.Statement == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: statement.Label}
		}
		return e.Statement, nil
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttributeReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attributereport.FieldID:
			values[i] = new(sql.NullInt64)
		case attributereport.ForeignKeys[0]: // statement_attributes_report
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttributeReport fields.
func (ar *AttributeReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attributereport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case attributereport.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field statement_attributes_report", value)
			} else if value.Valid {
				ar.statement_attributes_report = new(int)
				*ar.statement_attributes_report = int(value.Int64)
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttributeReport.
// This includes values selected through modifiers, order, etc.
func (ar *AttributeReport) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryAttributes queries the "attributes" edge of the AttributeReport entity.
func (ar *AttributeReport) QueryAttributes() *AttributeAssertionQuery {
	return NewAttributeReportClient(ar.config).QueryAttributes(ar)
}

// QueryStatement queries the "statement" edge of the AttributeReport entity.
func (ar *AttributeReport) QueryStatement() *StatementQuery {
	return NewAttributeReportClient(ar.config).QueryStatement(ar)
}

// Update returns a builder for updating this AttributeReport.
// Note that you need to call AttributeReport.Unwrap() before calling this method if this AttributeReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AttributeReport) Update() *AttributeReportUpdateOne {
	return NewAttributeReportClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AttributeReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AttributeReport) Unwrap() *AttributeReport {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttributeReport is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AttributeReport) String() string {
	var builder strings.Builder
	builder.WriteString("AttributeReport(")
	builder.WriteString(fmt.Sprintf("id=%v", ar.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttributes returns the Attributes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ar *AttributeReport) NamedAttributes(name string) ([]*AttributeAssertion, error) {
	if ar.Edges.namedAttributes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ar.Edges.namedAttributes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ar *AttributeReport) appendNamedAttributes(name string, edges ...*AttributeAssertion) {
	if ar.Edges.namedAttributes == nil {
		ar.Edges.namedAttributes = make(map[string][]*AttributeAssertion)
	}
	if len(edges) == 0 {
		ar.Edges.namedAttributes[name] = []*AttributeAssertion{}
	} else {
		ar.Edges.namedAttributes[name] = append(ar.Edges.namedAttributes[name], edges...)
	}
}

// AttributeReports is a parsable slice of AttributeReport.
type AttributeReports []*AttributeReport
