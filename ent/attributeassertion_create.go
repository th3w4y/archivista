// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/attributeassertion"
	"github.com/in-toto/archivista/ent/attributereport"
)

// AttributeAssertionCreate is the builder for creating a AttributeAssertion entity.
type AttributeAssertionCreate struct {
	config
	mutation *AttributeAssertionMutation
	hooks    []Hook
}

// SetAttribute sets the "attribute" field.
func (aac *AttributeAssertionCreate) SetAttribute(s string) *AttributeAssertionCreate {
	aac.mutation.SetAttribute(s)
	return aac
}

// SetTarget sets the "target" field.
func (aac *AttributeAssertionCreate) SetTarget(m map[string]interface{}) *AttributeAssertionCreate {
	aac.mutation.SetTarget(m)
	return aac
}

// SetConditions sets the "conditions" field.
func (aac *AttributeAssertionCreate) SetConditions(m map[string]interface{}) *AttributeAssertionCreate {
	aac.mutation.SetConditions(m)
	return aac
}

// SetEvidence sets the "evidence" field.
func (aac *AttributeAssertionCreate) SetEvidence(m map[string]interface{}) *AttributeAssertionCreate {
	aac.mutation.SetEvidence(m)
	return aac
}

// SetAttributesReportID sets the "attributes_report" edge to the AttributeReport entity by ID.
func (aac *AttributeAssertionCreate) SetAttributesReportID(id int) *AttributeAssertionCreate {
	aac.mutation.SetAttributesReportID(id)
	return aac
}

// SetAttributesReport sets the "attributes_report" edge to the AttributeReport entity.
func (aac *AttributeAssertionCreate) SetAttributesReport(a *AttributeReport) *AttributeAssertionCreate {
	return aac.SetAttributesReportID(a.ID)
}

// Mutation returns the AttributeAssertionMutation object of the builder.
func (aac *AttributeAssertionCreate) Mutation() *AttributeAssertionMutation {
	return aac.mutation
}

// Save creates the AttributeAssertion in the database.
func (aac *AttributeAssertionCreate) Save(ctx context.Context) (*AttributeAssertion, error) {
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AttributeAssertionCreate) SaveX(ctx context.Context) *AttributeAssertion {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AttributeAssertionCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AttributeAssertionCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AttributeAssertionCreate) check() error {
	if _, ok := aac.mutation.Attribute(); !ok {
		return &ValidationError{Name: "attribute", err: errors.New(`ent: missing required field "AttributeAssertion.attribute"`)}
	}
	if _, ok := aac.mutation.AttributesReportID(); !ok {
		return &ValidationError{Name: "attributes_report", err: errors.New(`ent: missing required edge "AttributeAssertion.attributes_report"`)}
	}
	return nil
}

func (aac *AttributeAssertionCreate) sqlSave(ctx context.Context) (*AttributeAssertion, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AttributeAssertionCreate) createSpec() (*AttributeAssertion, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeAssertion{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(attributeassertion.Table, sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt))
	)
	if value, ok := aac.mutation.Attribute(); ok {
		_spec.SetField(attributeassertion.FieldAttribute, field.TypeString, value)
		_node.Attribute = value
	}
	if value, ok := aac.mutation.Target(); ok {
		_spec.SetField(attributeassertion.FieldTarget, field.TypeJSON, value)
		_node.Target = value
	}
	if value, ok := aac.mutation.Conditions(); ok {
		_spec.SetField(attributeassertion.FieldConditions, field.TypeJSON, value)
		_node.Conditions = value
	}
	if value, ok := aac.mutation.Evidence(); ok {
		_spec.SetField(attributeassertion.FieldEvidence, field.TypeJSON, value)
		_node.Evidence = value
	}
	if nodes := aac.mutation.AttributesReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributeassertion.AttributesReportTable,
			Columns: []string{attributeassertion.AttributesReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.attribute_report_attributes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttributeAssertionCreateBulk is the builder for creating many AttributeAssertion entities in bulk.
type AttributeAssertionCreateBulk struct {
	config
	err      error
	builders []*AttributeAssertionCreate
}

// Save creates the AttributeAssertion entities in the database.
func (aacb *AttributeAssertionCreateBulk) Save(ctx context.Context) ([]*AttributeAssertion, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AttributeAssertion, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeAssertionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AttributeAssertionCreateBulk) SaveX(ctx context.Context) []*AttributeAssertion {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AttributeAssertionCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AttributeAssertionCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
