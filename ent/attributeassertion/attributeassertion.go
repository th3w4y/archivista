// Code generated by ent, DO NOT EDIT.

package attributeassertion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attributeassertion type in the database.
	Label = "attribute_assertion"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttribute holds the string denoting the attribute field in the database.
	FieldAttribute = "attribute"
	// FieldTarget holds the string denoting the target field in the database.
	FieldTarget = "target"
	// FieldConditions holds the string denoting the conditions field in the database.
	FieldConditions = "conditions"
	// FieldEvidence holds the string denoting the evidence field in the database.
	FieldEvidence = "evidence"
	// EdgeAttributesReport holds the string denoting the attributes_report edge name in mutations.
	EdgeAttributesReport = "attributes_report"
	// Table holds the table name of the attributeassertion in the database.
	Table = "attribute_assertions"
	// AttributesReportTable is the table that holds the attributes_report relation/edge.
	AttributesReportTable = "attribute_assertions"
	// AttributesReportInverseTable is the table name for the AttributeReport entity.
	// It exists in this package in order to avoid circular dependency with the "attributereport" package.
	AttributesReportInverseTable = "attribute_reports"
	// AttributesReportColumn is the table column denoting the attributes_report relation/edge.
	AttributesReportColumn = "attribute_report_attributes"
)

// Columns holds all SQL columns for attributeassertion fields.
var Columns = []string{
	FieldID,
	FieldAttribute,
	FieldTarget,
	FieldConditions,
	FieldEvidence,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attribute_assertions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"attribute_report_attributes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AttributeAssertion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAttribute orders the results by the attribute field.
func ByAttribute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttribute, opts...).ToFunc()
}

// ByAttributesReportField orders the results by attributes_report field.
func ByAttributesReportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributesReportStep(), sql.OrderByField(field, opts...))
	}
}
func newAttributesReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributesReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AttributesReportTable, AttributesReportColumn),
	)
}
