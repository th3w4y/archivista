// Code generated by ent, DO NOT EDIT.

package attributeassertion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/in-toto/archivista/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldLTE(FieldID, id))
}

// Attribute applies equality check predicate on the "attribute" field. It's identical to AttributeEQ.
func Attribute(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldEQ(FieldAttribute, v))
}

// AttributeEQ applies the EQ predicate on the "attribute" field.
func AttributeEQ(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldEQ(FieldAttribute, v))
}

// AttributeNEQ applies the NEQ predicate on the "attribute" field.
func AttributeNEQ(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNEQ(FieldAttribute, v))
}

// AttributeIn applies the In predicate on the "attribute" field.
func AttributeIn(vs ...string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldIn(FieldAttribute, vs...))
}

// AttributeNotIn applies the NotIn predicate on the "attribute" field.
func AttributeNotIn(vs ...string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNotIn(FieldAttribute, vs...))
}

// AttributeGT applies the GT predicate on the "attribute" field.
func AttributeGT(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldGT(FieldAttribute, v))
}

// AttributeGTE applies the GTE predicate on the "attribute" field.
func AttributeGTE(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldGTE(FieldAttribute, v))
}

// AttributeLT applies the LT predicate on the "attribute" field.
func AttributeLT(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldLT(FieldAttribute, v))
}

// AttributeLTE applies the LTE predicate on the "attribute" field.
func AttributeLTE(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldLTE(FieldAttribute, v))
}

// AttributeContains applies the Contains predicate on the "attribute" field.
func AttributeContains(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldContains(FieldAttribute, v))
}

// AttributeHasPrefix applies the HasPrefix predicate on the "attribute" field.
func AttributeHasPrefix(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldHasPrefix(FieldAttribute, v))
}

// AttributeHasSuffix applies the HasSuffix predicate on the "attribute" field.
func AttributeHasSuffix(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldHasSuffix(FieldAttribute, v))
}

// AttributeEqualFold applies the EqualFold predicate on the "attribute" field.
func AttributeEqualFold(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldEqualFold(FieldAttribute, v))
}

// AttributeContainsFold applies the ContainsFold predicate on the "attribute" field.
func AttributeContainsFold(v string) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldContainsFold(FieldAttribute, v))
}

// TargetIsNil applies the IsNil predicate on the "target" field.
func TargetIsNil() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldIsNull(FieldTarget))
}

// TargetNotNil applies the NotNil predicate on the "target" field.
func TargetNotNil() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNotNull(FieldTarget))
}

// ConditionsIsNil applies the IsNil predicate on the "conditions" field.
func ConditionsIsNil() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldIsNull(FieldConditions))
}

// ConditionsNotNil applies the NotNil predicate on the "conditions" field.
func ConditionsNotNil() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNotNull(FieldConditions))
}

// EvidenceIsNil applies the IsNil predicate on the "evidence" field.
func EvidenceIsNil() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldIsNull(FieldEvidence))
}

// EvidenceNotNil applies the NotNil predicate on the "evidence" field.
func EvidenceNotNil() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.FieldNotNull(FieldEvidence))
}

// HasAttributesReport applies the HasEdge predicate on the "attributes_report" edge.
func HasAttributesReport() predicate.AttributeAssertion {
	return predicate.AttributeAssertion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttributesReportTable, AttributesReportColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributesReportWith applies the HasEdge predicate on the "attributes_report" edge with a given conditions (other predicates).
func HasAttributesReportWith(preds ...predicate.AttributeReport) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(func(s *sql.Selector) {
		step := newAttributesReportStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttributeAssertion) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttributeAssertion) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttributeAssertion) predicate.AttributeAssertion {
	return predicate.AttributeAssertion(sql.NotPredicates(p))
}
