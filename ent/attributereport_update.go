// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/attributeassertion"
	"github.com/in-toto/archivista/ent/attributereport"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/statement"
)

// AttributeReportUpdate is the builder for updating AttributeReport entities.
type AttributeReportUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeReportMutation
}

// Where appends a list predicates to the AttributeReportUpdate builder.
func (aru *AttributeReportUpdate) Where(ps ...predicate.AttributeReport) *AttributeReportUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// AddAttributeIDs adds the "attributes" edge to the AttributeAssertion entity by IDs.
func (aru *AttributeReportUpdate) AddAttributeIDs(ids ...int) *AttributeReportUpdate {
	aru.mutation.AddAttributeIDs(ids...)
	return aru
}

// AddAttributes adds the "attributes" edges to the AttributeAssertion entity.
func (aru *AttributeReportUpdate) AddAttributes(a ...*AttributeAssertion) *AttributeReportUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAttributeIDs(ids...)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (aru *AttributeReportUpdate) SetStatementID(id int) *AttributeReportUpdate {
	aru.mutation.SetStatementID(id)
	return aru
}

// SetStatement sets the "statement" edge to the Statement entity.
func (aru *AttributeReportUpdate) SetStatement(s *Statement) *AttributeReportUpdate {
	return aru.SetStatementID(s.ID)
}

// Mutation returns the AttributeReportMutation object of the builder.
func (aru *AttributeReportUpdate) Mutation() *AttributeReportMutation {
	return aru.mutation
}

// ClearAttributes clears all "attributes" edges to the AttributeAssertion entity.
func (aru *AttributeReportUpdate) ClearAttributes() *AttributeReportUpdate {
	aru.mutation.ClearAttributes()
	return aru
}

// RemoveAttributeIDs removes the "attributes" edge to AttributeAssertion entities by IDs.
func (aru *AttributeReportUpdate) RemoveAttributeIDs(ids ...int) *AttributeReportUpdate {
	aru.mutation.RemoveAttributeIDs(ids...)
	return aru
}

// RemoveAttributes removes "attributes" edges to AttributeAssertion entities.
func (aru *AttributeReportUpdate) RemoveAttributes(a ...*AttributeAssertion) *AttributeReportUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAttributeIDs(ids...)
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (aru *AttributeReportUpdate) ClearStatement() *AttributeReportUpdate {
	aru.mutation.ClearStatement()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AttributeReportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AttributeReportUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AttributeReportUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AttributeReportUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AttributeReportUpdate) check() error {
	if _, ok := aru.mutation.StatementID(); aru.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeReport.statement"`)
	}
	return nil
}

func (aru *AttributeReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributereport.Table, attributereport.Columns, sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aru.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attributereport.AttributesTable,
			Columns: []string{attributereport.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAttributesIDs(); len(nodes) > 0 && !aru.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attributereport.AttributesTable,
			Columns: []string{attributereport.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attributereport.AttributesTable,
			Columns: []string{attributereport.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attributereport.StatementTable,
			Columns: []string{attributereport.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attributereport.StatementTable,
			Columns: []string{attributereport.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributereport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AttributeReportUpdateOne is the builder for updating a single AttributeReport entity.
type AttributeReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeReportMutation
}

// AddAttributeIDs adds the "attributes" edge to the AttributeAssertion entity by IDs.
func (aruo *AttributeReportUpdateOne) AddAttributeIDs(ids ...int) *AttributeReportUpdateOne {
	aruo.mutation.AddAttributeIDs(ids...)
	return aruo
}

// AddAttributes adds the "attributes" edges to the AttributeAssertion entity.
func (aruo *AttributeReportUpdateOne) AddAttributes(a ...*AttributeAssertion) *AttributeReportUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAttributeIDs(ids...)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (aruo *AttributeReportUpdateOne) SetStatementID(id int) *AttributeReportUpdateOne {
	aruo.mutation.SetStatementID(id)
	return aruo
}

// SetStatement sets the "statement" edge to the Statement entity.
func (aruo *AttributeReportUpdateOne) SetStatement(s *Statement) *AttributeReportUpdateOne {
	return aruo.SetStatementID(s.ID)
}

// Mutation returns the AttributeReportMutation object of the builder.
func (aruo *AttributeReportUpdateOne) Mutation() *AttributeReportMutation {
	return aruo.mutation
}

// ClearAttributes clears all "attributes" edges to the AttributeAssertion entity.
func (aruo *AttributeReportUpdateOne) ClearAttributes() *AttributeReportUpdateOne {
	aruo.mutation.ClearAttributes()
	return aruo
}

// RemoveAttributeIDs removes the "attributes" edge to AttributeAssertion entities by IDs.
func (aruo *AttributeReportUpdateOne) RemoveAttributeIDs(ids ...int) *AttributeReportUpdateOne {
	aruo.mutation.RemoveAttributeIDs(ids...)
	return aruo
}

// RemoveAttributes removes "attributes" edges to AttributeAssertion entities.
func (aruo *AttributeReportUpdateOne) RemoveAttributes(a ...*AttributeAssertion) *AttributeReportUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAttributeIDs(ids...)
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (aruo *AttributeReportUpdateOne) ClearStatement() *AttributeReportUpdateOne {
	aruo.mutation.ClearStatement()
	return aruo
}

// Where appends a list predicates to the AttributeReportUpdate builder.
func (aruo *AttributeReportUpdateOne) Where(ps ...predicate.AttributeReport) *AttributeReportUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AttributeReportUpdateOne) Select(field string, fields ...string) *AttributeReportUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AttributeReport entity.
func (aruo *AttributeReportUpdateOne) Save(ctx context.Context) (*AttributeReport, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AttributeReportUpdateOne) SaveX(ctx context.Context) *AttributeReport {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AttributeReportUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AttributeReportUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AttributeReportUpdateOne) check() error {
	if _, ok := aruo.mutation.StatementID(); aruo.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeReport.statement"`)
	}
	return nil
}

func (aruo *AttributeReportUpdateOne) sqlSave(ctx context.Context) (_node *AttributeReport, err error) {
	if err := aruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributereport.Table, attributereport.Columns, sqlgraph.NewFieldSpec(attributereport.FieldID, field.TypeInt))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributereport.FieldID)
		for _, f := range fields {
			if !attributereport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributereport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aruo.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attributereport.AttributesTable,
			Columns: []string{attributereport.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAttributesIDs(); len(nodes) > 0 && !aruo.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attributereport.AttributesTable,
			Columns: []string{attributereport.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attributereport.AttributesTable,
			Columns: []string{attributereport.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributeassertion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attributereport.StatementTable,
			Columns: []string{attributereport.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attributereport.StatementTable,
			Columns: []string{attributereport.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeReport{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributereport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
